generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("NEXT_PUBLIC_DATABASE_URL")
  directUrl = env("NEXT_PUBLIC_DIRECT_URL")
}

model accounts {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  scope             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  access_token      String?
  id_token          String?
  refresh_token     String?
  session_state     String?
  token_type        String?
  expires_at        Int?
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users             users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model extension_metrics {
  id           String     @id
  extensionId  String
  activeUsers  Int?
  ratingsCount Int?
  ratingsValue Float?
  scrapedAt    DateTime   @default(now())
  extensions   extensions @relation(fields: [extensionId], references: [id], onDelete: Cascade)

  @@unique([extensionId, scrapedAt])
  @@index([extensionId])
  @@index([scrapedAt])
}

model extensions {
  id                String              @id
  name              String              @db.VarChar(255)
  url               String              @db.VarChar(1024)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  extension_metrics extension_metrics[]
  user_extensions   user_extensions[]
}

model sessions {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_extensions {
  userId      String     @db.Uuid
  extensionId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  extensions  extensions @relation(fields: [extensionId], references: [id])
  users       users      @relation(fields: [userId], references: [id])

  @@id([userId, extensionId])
  @@index([userId])
}

model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  accounts        accounts[]
  sessions        sessions[]
  user_extensions user_extensions[]
}

model verification_tokens {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
