generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Extension {
  id              String            @id
  name            String            @db.VarChar(255)
  url             String            @db.VarChar(1024)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  ExtensionMetric ExtensionMetric[]
  UserExtension   UserExtension[]
}

model ExtensionMetric {
  id            String    @id
  extension_id  String
  active_users  Int?
  ratings_count Int?
  ratings_value Float?
  scraped_at    DateTime  @default(now())
  Extension     Extension @relation(fields: [extension_id], references: [id], onDelete: Cascade)

  @@unique([extension_id, scraped_at])
  @@index([extension_id])
  @@index([scraped_at])
}

model User {
  id            String          @id
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  Account       Account[]
  Authenticator Authenticator[]
  Session       Session[]
  extensions    UserExtension[]
}

model UserExtension {
  userId      String
  extensionId String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  Extension   Extension @relation(fields: [extensionId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@id([userId, extensionId])
  @@index([userId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  User                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
